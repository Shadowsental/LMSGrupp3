// <auto-generated />
using System;
using LMSGrupp3.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LMSGrupp3.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220317085449_seedMultiple")]
    partial class seedMultiple
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("LMSGrupp3.Models.Entities.People", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "87bc8151-9fa3-4c89-a241-1d3eb5318e35",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2021, 4, 10, 16, 0, 38, 601, DateTimeKind.Local).AddTicks(7084),
                            ConcurrencyStamp = "cacd3d1a-6d01-4d1f-8646-c77c44078773",
                            Email = "Jolie19@hotmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Doug Purdy",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8825b3bd-dcb5-4d17-a101-1a1e2718480b",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "da534f4e-1aad-4dc9-ab8e-ca68bb91584c",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2021, 7, 14, 2, 48, 3, 809, DateTimeKind.Local).AddTicks(5474),
                            ConcurrencyStamp = "11c74497-fdba-4d28-b62d-16ed8bc805a0",
                            Email = "Michale_Ratke@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Clair Jakubowski",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f5aad4fa-7e9e-4096-89f6-29918b079514",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "a6334ea1-6e6e-4e5e-bd29-2b37a1d2154f",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2021, 5, 4, 3, 36, 20, 328, DateTimeKind.Local).AddTicks(2081),
                            ConcurrencyStamp = "dc1a0252-0a8c-4306-9303-ff0025e94185",
                            Email = "Elta1@hotmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Eusebio Bogan",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "696ef932-0ee9-417a-84f7-5177685a96ee",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "d305260d-85fb-4e01-8f46-1454e8c2d5b7",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2021, 12, 27, 19, 24, 40, 692, DateTimeKind.Local).AddTicks(2823),
                            ConcurrencyStamp = "6bad990f-a178-460e-8b92-20c1650c364f",
                            Email = "Lavon.Welch@hotmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Josie Zieme",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "619607eb-791d-4b51-abf1-c39bdbf98872",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "0b754a61-94dc-448f-a51f-28d5229c5c9d",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2021, 11, 29, 16, 31, 35, 636, DateTimeKind.Local).AddTicks(5411),
                            ConcurrencyStamp = "ff793665-c93f-420a-97b6-2cdcc6a5b98d",
                            Email = "Lenore.Mohr65@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Clovis Franecki",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0f950afc-5f2c-4634-8b60-527d2ceed95a",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "33ffe7e1-d9e5-454d-9380-5a9b14e0d16d",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2021, 4, 21, 15, 50, 9, 342, DateTimeKind.Local).AddTicks(972),
                            ConcurrencyStamp = "f4e809b8-d122-4247-84f0-fa08edcaf6a0",
                            Email = "Adaline_Labadie88@yahoo.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Garnett Kub",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0fa7ab3f-0816-418b-95b8-0a8915b8b579",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "19656612-3981-4c41-8092-233f9b8bf345",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2021, 8, 8, 5, 2, 24, 491, DateTimeKind.Local).AddTicks(7962),
                            ConcurrencyStamp = "7bece49a-d3c3-4305-a612-ac401816c582",
                            Email = "Derek.Rowe@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Anissa Kessler",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3bbd4b5e-3d1d-48bd-a226-861395507b21",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "ede7182b-6261-4ec3-b29d-347aa14c85fa",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2022, 2, 13, 6, 11, 21, 620, DateTimeKind.Local).AddTicks(5454),
                            ConcurrencyStamp = "4a0f5c41-7580-4a87-825a-e1fc17d3472f",
                            Email = "Sheila.Cremin@yahoo.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Zoie Labadie",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "44aa3159-423a-43d1-9c7b-ceb6797bfd20",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "3cd46bb2-1bdb-442f-b779-88944da71d8e",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2021, 7, 11, 11, 6, 57, 588, DateTimeKind.Local).AddTicks(3522),
                            ConcurrencyStamp = "4b26c9a3-cf6b-43a2-8e84-9fa7994b45d5",
                            Email = "Hobart13@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Jaeden Gerlach",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1569684e-dd51-4c8d-8d1f-73329448d343",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "5819f250-51fc-4f82-afbe-950a5096d567",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2022, 3, 5, 7, 47, 34, 387, DateTimeKind.Local).AddTicks(1314),
                            ConcurrencyStamp = "f16d64bb-4a96-44cb-b9e0-6c7a07e267dc",
                            Email = "Gladys15@yahoo.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Abraham Harris",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bee99b45-e32b-4fc5-ad8a-01bc52779574",
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("LMSGrupp3.Models.Entities.People", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("LMSGrupp3.Models.Entities.People", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMSGrupp3.Models.Entities.People", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("LMSGrupp3.Models.Entities.People", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
